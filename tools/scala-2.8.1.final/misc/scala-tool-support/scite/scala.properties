# Define SciTE settings for Scala files.
#
# Author  : Stephane Micheloud <stephane.micheloud@epfl.ch>

file.patterns.scala=*.scala

filter.scala=Scala (scala)|*.scala|

file.patterns.braces=$(file.patterns.scala)

# We reuse the cpp lexer here
lexer.$(file.patterns.scala)=cpp

indent.size.$(file.patterns.scala)=2
use.tabs.$(file.patterns.scala)=2

keywordclass.scala= \
abstract case catch class def do else extends \
false final finally for forSome if implicit import lazy match new \
object override package private protected requires return sealed \
throw trait true try type val var with while yield @ =>
keywords.$(file.patterns.scala)=$(keywordclass.scala)

keywords2.$(file.patterns.scala)=null super this

keywords3.$(file.patterns.scala)= \
AllRef Any AnyRef Array Attribute Elem Iterable List \
Option Some Stack String Unit

keywords4.$(file.patterns.scala)=Console Nil None Predef

word.characters.$(file.patterns.scala)=$(chars.alpha)$(chars.numeric)_

comment.block.scala=//~
#comment.block.at.line.start.scala=1
comment.stream.start.scala=/*
comment.stream.end.scala=*/
comment.box.start.scala=/*
comment.box.middle.scala= *
comment.box.end.scala= */
#fold.comment=1
#fold.preprocessor=1
#fold.at.else=1

statement.indent.$(file.patterns.scala)=5 case catch class do else finally \
for if private protected try while
statement.end.$(file.patterns.scala)=10 ;
statement.lookback.$(file.patterns.scala)=20
block.start.$(file.patterns.scala)=10 {
block.end.$(file.patterns.scala)=10 }

# Scala styles

# Default
#style.scala.32=$(font.base)
# White space
style.scala.0=fore:#808080
# Comment
style.scala.1=$(colour.code.comment.box),$(font.code.comment.box)
# Line Comment
style.scala.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment
style.scala.3=$(colour.code.comment.doc),$(font.code.comment.doc)
# Number
style.scala.4=$(colour.number)
# Keyword
style.scala.5=$(colour.keyword),bold
# Double quoted string
style.scala.6=$(colour.string)
# Single quoted string
style.scala.7=$(colour.char)

command.compile.*.scala=scalac $(FileNameExt)
command.build.*.scala=scalac $(FileNameExt)
command.go.*.scala=scala $(FileName)

