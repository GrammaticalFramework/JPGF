// -*- Java -*- This Cup file was machine-generated by BNFC
package org.grammaticalframework.Trees;

parser code {:
  public org.grammaticalframework.Trees.Absyn.Tree pTree() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (org.grammaticalframework.Trees.Absyn.Tree) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal org.grammaticalframework.Trees.Absyn.Tree Tree;
nonterminal org.grammaticalframework.Trees.Absyn.Lit Lit;

terminal _SYMB_0;    //   \
terminal _SYMB_1;    //   ->
terminal _SYMB_2;    //   $
terminal _SYMB_3;    //   (
terminal _SYMB_4;    //   )
terminal _SYMB_5;    //   META_

terminal String _STRING_;

terminal Integer _INTEGER_;
terminal Double _DOUBLE_;
terminal String _IDENT_;



start with Tree;


Tree ::= _SYMB_0 _IDENT_:p_2 _SYMB_1 Tree:p_4  {: RESULT = new org.grammaticalframework.Trees.Absyn.Lambda(p_2,p_4); :} 
  | _SYMB_2 _INTEGER_:p_2  {: RESULT = new org.grammaticalframework.Trees.Absyn.Variable(p_2); :}
  | _SYMB_3 Tree:p_2 Tree:p_3 _SYMB_4  {: RESULT = new org.grammaticalframework.Trees.Absyn.Application(p_2,p_3); :}
  | Lit:p_1  {: RESULT = new org.grammaticalframework.Trees.Absyn.Literal(p_1); :}
  | _SYMB_5 _INTEGER_:p_2  {: RESULT = new org.grammaticalframework.Trees.Absyn.MetaVariable(p_2); :}
  | _IDENT_:p_1  {: RESULT = new org.grammaticalframework.Trees.Absyn.Function(p_1); :}
;
Lit ::= _INTEGER_:p_1  {: RESULT = new org.grammaticalframework.Trees.Absyn.IntLiteral(p_1); :} 
  | _DOUBLE_:p_1  {: RESULT = new org.grammaticalframework.Trees.Absyn.FloatLiteral(p_1); :}
  | _STRING_:p_1  {: RESULT = new org.grammaticalframework.Trees.Absyn.StringLiteral(p_1); :}
;

