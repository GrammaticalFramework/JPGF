-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParTrees where
import AbsTrees
import LexTrees
import ErrM
}

%name pTree Tree
%name pLit Lit

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '\\' { PT _ (TS "\\") }
 '->' { PT _ (TS "->") }
 '$' { PT _ (TS "$") }
 '(' { PT _ (TS "(") }
 ')' { PT _ (TS ")") }
 'META_' { PT _ (TS "META_") }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_quoted { PT _ (TL $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read $1) :: Integer }
Double  :: { Double }  : L_doubl  { (read $1) :: Double }
String  :: { String }  : L_quoted { $1 }

Tree :: { Tree }
Tree : '\\' Ident '->' Tree { Lambda $2 $4 } 
  | '$' Integer { Variable $2 }
  | '(' Tree Tree ')' { Application $2 $3 }
  | Lit { Literal $1 }
  | 'META_' Integer { MetaVariable $2 }
  | Ident { Function $1 }


Lit :: { Lit }
Lit : Integer { IntLiteral $1 } 
  | Double { FloatLiteral $1 }
  | String { StringLiteral $1 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map prToken (take 4 ts))

myLexer = tokens
}

